{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": { "default": "Replication Configuration" },
          "Parameters": [ "ReplicaRegion" ]
        },
        {
          "Label": { "default": "Replication Resources" },
          "Parameters": [ "ControllerTableName", "PrefixTableName", "ApiName" ]
        },
        {
          "Label": { "default": "Delay Monitoring" },
          "Parameters": [ "DelayThreshold", "DelayNotifications", "DelayEndpointProtocol", "DelayEndpoint" ]
        }
      ]
    }
  },
  "Parameters": {
    "ReplicaRegion": {
      "Type": "String",
      "Default": "us-west-2",
      "Description": "The destination region for table replication"
    },
    "ControllerTableName": {
      "Type": "String",
      "Default": "ReplicationController",
      "Description": "Name of the DynamoDB table that holds replication metadata"
    },
    "PrefixTableName": {
      "Type": "String",
      "Default": "ReplicationPrefixes",
      "Description": "Name of the DynamoDB table that holds the replication prefixes"
    },
    "ApiName": {
      "Type": "String",
      "Default": "ReplicationApi",
      "Description": "Name of the rest API used to manage replication"
    },
    "DelayThreshold": {
      "Type": "Number",
      "Description": "How far behind does the replication need to be (in minutes) to trigger the alarm to send a notification?",
      "Default": 5,
      "MinValue": 2
    },
    "DelayNotifications": {
      "Type": "String",
      "Default": "true",
      "AllowedValues": [ "true", "false" ],
      "Description": "Set to true if you want to recieve notifications if a replica table falls too far behind the master.  If not, set to false and ignore the following two parameters in this group."
    },

    "DelayEndpointProtocol":{
      "Type": "String",
      "Default": "email",
      "AllowedValues": [ "http", "https", "email", "email-json", "sms", "sqs", "application", "lambda" ],
      "Description": "The protocol of the notification endpoint."
    },
    "DelayEndpoint": {
      "Type": "String",
      "Description": "The endpoint to send notifications to."
    }
  },
  "Conditions": {
    "NotifyOnDelay": {
      "Fn::Equals": [
        { "Ref": "DelayNotifications" },
        "true"
      ]
    }
  },
  "Resources": {
    "ReplicatorRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/replicator/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationReplicatorPolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "Logging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "InvokeSelf",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Sid": "SourceStream",
                  "Action": [
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:dynamodb:*:*:table/*/stream/*"
                },
                {
                  "Sid": "ReplicaTable",
                  "Action": [
                    "dynamodb:BatchWriteItem"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ ":", [ "arn", "aws", "dynamodb", { "Ref": "ReplicaRegion" }, "*", "table/*"]]}
                }
              ]
            }
          }
        ]
      }
    },
    "ReplicatorFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-Replicator",
        "Description": "Replicate dynamodb table data across regions",
        "Role": { "Fn::GetAtt": [ "ReplicatorRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/replicator/index.min.js",
              "context": {
                "replicaRegion": { "Ref": "ReplicaRegion" }
              }
            }
          }
        }
      }
    },
    "MetricRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/metrics/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationMetricPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "cloudwatch:PutMetricData"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Effect": "Allow",
                      "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                      ],
                      "Resource": "arn:aws:logs:*:*:*"
                  }
              ]
          }
          }
        ]
      }
    },
    "MetricFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-Metrics",
        "Description": "Post custom replication metrics to CloudWatch, parsed from a log subscription",
        "Role": { "Fn::GetAtt": [ "MetricRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/replicator/metrics.min.js"
            }
          }
        }
      }
    },
    "MetricSubscription": {
      "Type": "AWS::Logs::SubscriptionFilter",
      "DependsOn": "MetricPermission",
      "Properties": {
        "LogGroupName": { "Fn::GetAtt": [ "ReplicatorLogGroup", "LogGroupName" ] },
        "FilterPattern": "[timestamp, request_id, metric=METRIC, table, level,  name, value]",
        "DestinationArn": { "Fn::GetAtt": [ "MetricFunction", "Arn" ] }
      }
    },
    "MetricPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": { "Fn::GetAtt": [ "MetricFunction", "Arn" ] },
        "Action": "lambda:InvokeFunction",
        "Principal": { "Fn::Join": [ ".", [ "logs", { "Ref": "AWS::Region" }, "amazonaws", "com" ] ] },
        "SourceArn": { "Fn::Join": [ ":", [ "arn", "aws", "logs", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "log-group", { "Fn::GetAtt": [ "ReplicatorLogGroup", "LogGroupName" ] }, "*" ] ] }
      }
    },
    "ReplicatorLogGroup": {
      "Type": "Custom::LogGroup",
      "DeletionPolicy": "Retain",
      "Properties": {
        "ServiceToken": { "Fn::GetAtt" : [ "CreateLogGroupFunction", "Arn" ] },
        "FunctionName": { "Ref": "ReplicatorFunction" }
      }
    },
    "CreateLogGroupRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/cfn/loggroup/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "CreateLogGroupPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                      ],
                      "Resource": "arn:aws:logs:*:*:*"
                  }
              ]
            }
          }
        ]
      }
    },
    "CreateLogGroupFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replicator-Cfn-LogGroup",
        "Description": "Endpoint for cloudformation custom resource.  Creates log group for the main replicator function",
        "Handler": "index.handler",
        "Runtime": "python2.7",
        "Timeout": "60",
        "Role": { "Fn::GetAtt" : [ "CreateLogGroupRole", "Arn" ] },
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "custom-resources/log-group.py"
            }
          }
        }
      }
    },
    "ControllerTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": { "Ref": "ControllerTableName" },
        "AttributeDefinitions": [
          {
            "AttributeName": "tableName",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "tableName",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      }
    },
    "PrefixTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": { "Ref": "PrefixTableName" },
        "AttributeDefinitions": [
          {
            "AttributeName": "prefix",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "prefix",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        },
        "StreamSpecification": {
          "StreamViewType": "NEW_AND_OLD_IMAGES"
        }
      }
    },
    "ControllerRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/controller/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationControllerPolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "InvokeFunctions",
                  "Action": [
                    "lambda:InvokeFunction"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Sid": "SourceStream",
                  "Action": [
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ "", [ "arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "ControllerTableName" }, "/stream/*" ] ] }
                },
                {
                  "Sid": "ReplicaTable",
                  "Action": [
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ "", [ "arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "ControllerTableName" } ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "ControllerFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-Controller",
        "Description": "Invokes lambda functions in response to changes in state and/or step on the replication controller table",
        "Role": { "Fn::GetAtt": [ "ControllerRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/controller/index.min.js",
              "context": {
                "replicatorFunction": { "Fn::GetAtt": [ "ReplicatorFunction", "Arn" ] },
                "validateSourceFunction": { "Fn::GetAtt": [ "ValidateSourceFunction", "Arn" ] },
                "validateReplicaFunction": { "Fn::GetAtt": [ "ValidateReplicaFunction", "Arn" ] },
                "createReplicaFunction": { "Fn::GetAtt": [ "CreateReplicaFunction", "Arn" ] },
                "startReplicationFunction": { "Fn::GetAtt": [ "StartReplicationFunction", "Arn" ] },
                "stopReplicationFunction": { "Fn::GetAtt": [ "StopReplicationFunction", "Arn" ] }
              }
            }
          }
        }
      }
    },
    "ControllerEvent": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "FunctionName": { "Fn::GetAtt": [ "ControllerFunction", "Arn" ] },
        "EventSourceArn": { "Fn::GetAtt": [ "ControllerTable", "StreamArn" ] },
        "BatchSize": 1,
        "StartingPosition": "TRIM_HORIZON"
      }
    },
    "ValidateSourceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/controller/validate-source/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationValidateSourcePolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "ValidateSourceTable",
                  "Action": [
                    "dynamodb:DescribeTable"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ ":", [ "arn", "aws", "dynamodb", {"Ref": "AWS::Region"}, { "Ref": "AWS::AccountId" }, "table/*" ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "ValidateSourceFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-ValidateSource",
        "Description": "Validates that the source table exists and is configured correctly for replication",
        "Role": { "Fn::GetAtt": [ "ValidateSourceRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 270,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/controller/validate-source/index.min.js"
            }
          }
        }
      }
    },
    "ValidateReplicaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/controller/validate-replica/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationValidateReplicaPolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "ValidateReplicaTable",
                  "Action": [
                    "dynamodb:DescribeTable"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ ":", [ "arn", "aws", "dynamodb", {"Ref": "ReplicaRegion"}, { "Ref": "AWS::AccountId" }, "table/*" ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "ValidateReplicaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-ValidateReplica",
        "Description": "Check whether the replica table exists and has a key schema that matches the source",
        "Role": { "Fn::GetAtt": [ "ValidateReplicaRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 270,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/controller/validate-replica/index.min.js",
              "context": {
                "replicaRegion": { "Ref": "ReplicaRegion" }
              }
            }
          }
        }
      }
    },
    "CreateReplicaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/controller/create-replica/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationCreateReplicaPolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "DescribeSource",
                  "Action": [
                    "dynamodb:DescribeTable"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ ":", [ "arn", "aws", "dynamodb", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "table/*" ]]}
                },
                {
                  "Sid": "CreateReplica",
                  "Action": [
                    "dynamodb:CreateTable"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ ":", [ "arn", "aws", "dynamodb", {"Ref": "ReplicaRegion" }, { "Ref": "AWS::AccountId" }, "table/*" ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "CreateReplicaFunction" : {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-CreateReplica",
        "Description": "Creates a replica table to match the source",
        "Role": { "Fn::GetAtt": [ "CreateReplicaRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 270,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/controller/create-replica/index.min.js",
              "context": {
                "replicaRegion": { "Ref": "ReplicaRegion" }
              }
            }
          }
        }
      }
    },
    "StartReplicationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/controller/start-replication/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationStartReplicationPolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "CreateEventSource",
                  "Action": [
                    "lambda:CreateEventSourceMapping"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "StartReplicationFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-StartReplication",
        "Description": "Starts the replication process by adding an event source mapping to the replicator function",
        "Role": { "Fn::GetAtt": [ "StartReplicationRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 270,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/controller/start-replication/index.min.js"
            }
          }
        }
      }
    },
    "StopReplicationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/controller/start-replication/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationStartReplicationPolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "DeleteEventSource",
                  "Action": [
                    "lambda:DeleteEventSourceMapping"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "StopReplicationFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-StopReplication",
        "Description": "Stops the replication process by removing the event source mapping from the replicator function",
        "Role": { "Fn::GetAtt": [ "StopReplicationRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 270,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/controller/stop-replication/index.min.js"
            }
          }
        }
      }
    },
    "WatcherPrefixCreateRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/watcher/prefix/create/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationWatcherPrefixCreatePolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "GetPrefixes",
                  "Action": [
                    "dynamodb:Scan"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "PrefixTableName" } ] ] }
                },
                {
                  "Sid": "AddReplication",
                  "Action": [
                    "dynamodb:PutItem"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "ControllerTableName" } ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "WatcherPrefixCreateFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-Watcher-Prefix-Create",
        "Description": "Starts replication for new tables matching one of a list of prefixes (stored in dynamodb)",
        "Role": { "Fn::GetAtt": [ "WatcherPrefixCreateRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 260,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/watcher/prefix/create.min.js",
              "context": {
                "prefixTable": { "Ref": "PrefixTableName" },
                "controllerTable": { "Ref": "ControllerTableName" }
              }
            }
          }
        }
      }
    },
    "WatcherPrefixCreateRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Invoke the replication watcher prefix create function when new DynamoDB tables are created",
        "Name": "Replication-Watcher-Prefix-Create",
        "State": "ENABLED",
        "EventPattern": {
          "source": [
             "aws.dynamodb",
             "replication.watcher.prefix.init"
           ],
           "detail": {
             "eventSource": [
               "dynamodb.amazonaws.com"
             ],
             "eventName": [
               "CreateTable"
             ]
           }
        },
        "Targets": [
          {
            "Arn": { "Fn::GetAtt": [ "WatcherPrefixCreateFunction", "Arn" ] },
            "Id": "Replication-Watcher-Prefix-Create"
          }
        ]
      }
    },
    "WatcherPrefixCreatePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Fn::GetAtt": [ "WatcherPrefixCreateFunction", "Arn" ] },
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": [ "WatcherPrefixCreateRule", "Arn" ] }
      }
    },
    "WatcherPrefixDeleteRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/watcher/prefix/delete/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationWatcherPrefixDeletePolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "StopReplication",
                  "Action": [
                    "dynamodb:UpdateItem"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "ControllerTableName" } ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "WatcherPrefixDeleteFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-Watcher-Prefix-Delete",
        "Description": "Stops/removes replication when a source dynamodb table is deleted",
        "Role": { "Fn::GetAtt": [ "WatcherPrefixDeleteRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/watcher/prefix/delete.min.js",
              "context": {
                "controllerTable": { "Ref": "ControllerTableName" }
              }
            }
          }
        }
      }
    },
    "WatcherPrefixDeleteRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Invoke the replication watcher prefix delete function when any DynamoDB tables are deleted",
        "Name": "Replication-Watcher-Prefix-Delete",
        "State": "ENABLED",
        "EventPattern": {
          "detail-type": [
             "AWS API Call via CloudTrail"
           ],
           "detail": {
             "eventSource": [
               "dynamodb.amazonaws.com"
             ],
             "eventName": [
               "DeleteTable"
             ]
           }
        },
        "Targets": [
          {
            "Arn": { "Fn::GetAtt": [ "WatcherPrefixDeleteFunction", "Arn" ] },
            "Id": "Replication-Watcher-Prefix-Delete"
          }
        ]
      }
    },
    "WatcherPrefixDeletePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Fn::GetAtt": [ "WatcherPrefixDeleteFunction", "Arn" ] },
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": [ "WatcherPrefixDeleteRule", "Arn" ] }
      }
    },
    "WatcherPrefixInitRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/watcher/prefix/init/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationWatcherPrefixInitPolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "PrefixTableStream",
                  "Action": [
                    "dynamodb:GetRecords",
                    "dynamodb:GetShardIterator",
                    "dynamodb:DescribeStream",
                    "dynamodb:ListStreams"
                  ],
                  "Effect": "Allow",
                  "Resource": { "Fn::Join": [ "", [ "arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "PrefixTableName" }, "/stream/*" ] ] }
                },
                {
                  "Sid": "PutCreateEvents",
                  "Action": [
                    "events:PutEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                },
                {
                  "Sid": "ListTables",
                  "Action": [
                    "dynamodb:ListTables"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "WatcherPrefixInitFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-Watcher-Prefix-Init",
        "Description": "When a new prefix is added to the list, start replication for all existing matching tables",
        "Role": { "Fn::GetAtt": [ "WatcherPrefixInitRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/watcher/prefix/init.min.js"
            }
          }
        }
      }
    },
    "WatcherPrefixInitEvent": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "Properties": {
        "FunctionName": { "Fn::GetAtt": [ "WatcherPrefixInitFunction", "Arn" ] },
        "EventSourceArn": { "Fn::GetAtt": [ "PrefixTable", "StreamArn" ] },
        "BatchSize": 1,
        "StartingPosition": "TRIM_HORIZON"
      }
    },
    "WatcherAlarmTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "DisplayName": "ReplicationAlarmTopic",
        "TopicName": "ReplicationAlarmTopic",
        "Subscription": {
          "Fn::If": [
            "NotifyOnDelay",
            [
              {
                "Endpoint": { "Ref": "DelayEndpoint" },
                "Protocol": { "Ref": "DelayEndpointProtocol" }
              }
            ],
            {
              "Ref": "AWS::NoValue"
            }
          ]
        }
      }
    },
    "WatcherAlarmCreateRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/watcher/alarm/create/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationWatcherAlarmCreatePolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "CreateAlarm",
                  "Action": [
                    "cloudwatch:PutMetricAlarm",
                    "cloudwatch:PutMetricData"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "WatcherAlarmCreateFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-Watcher-Alarm-Create",
        "Description": "Creates an alarm for a replication's MinutesBehindRecord metric",
        "Role": { "Fn::GetAtt": [ "WatcherAlarmCreateRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/watcher/alarm/create.min.js",
              "context": {
                "snsTopic": { "Ref": "WatcherAlarmTopic" },
                "delayThreshold": { "Ref": "DelayThreshold" }
              }
            }
          }
        }
      }
    },
    "WatcherAlarmCreateRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Invoke the replication watcher alarm create function when any event source is added to the replicator",
        "Name": "Replication-Watcher-Alarm-Create",
        "State": "ENABLED",
        "EventPattern": {
          "detail-type": [
            "AWS API Call via CloudTrail"
          ],
          "detail": {
            "eventSource": [
              "lambda.amazonaws.com"
            ],
            "eventName": [
              "CreateEventSourceMapping20150331"
            ],
            "responseElements": {
              "functionArn": [
                { "Fn::GetAtt": [ "ReplicatorFunction", "Arn" ] }
              ]
            }
          }
        },
        "Targets": [
          {
            "Arn": { "Fn::GetAtt": [ "WatcherAlarmCreateFunction", "Arn" ] },
            "Id": "Replication-Watcher-Alarm-Create"
          }
        ]
      }
    },
    "WatcherAlarmCreatePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Fn::GetAtt": [ "WatcherAlarmCreateFunction", "Arn" ] },
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": [ "WatcherAlarmCreateRule", "Arn" ] }
      }
    },
    "WatcherAlarmDeleteRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/watcher/alarm/delete/",
        "AssumeRolePolicyDocument" : {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Policies": [
          {
            "PolicyName": "ReplicationWatcherAlarmDeletePolicy",
            "PolicyDocument":  {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*:*"
                },
                {
                  "Sid": "DeleteAlarm",
                  "Action": [
                    "cloudwatch:DeleteAlarms"
                  ],
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "WatcherAlarmDeleteFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-Watcher-Alarm-Delete",
        "Description": "Deletes a replication's MinutsBehindRecord alarm",
        "Role": { "Fn::GetAtt": [ "WatcherAlarmDeleteRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/watcher/alarm/delete.min.js"
            }
          }
        }
      }
    },
    "WatcherAlarmDeleteRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "Description": "Invoke the replication watcher alarm delete function when any event source is removed from the replicator",
        "Name": "Replication-Watcher-Alarm-Delete",
        "State": "ENABLED",
        "EventPattern": {
          "detail-type": [
            "AWS API Call via CloudTrail"
          ],
          "detail": {
            "eventSource": [
              "lambda.amazonaws.com"
            ],
            "eventName": [
              "DeleteEventSourceMapping20150331"
            ],
            "responseElements": {
              "functionArn": [
                { "Fn::GetAtt": [ "ReplicatorFunction", "Arn" ] }
              ]
            }
          }
        },
        "Targets": [
          {
            "Arn": { "Fn::GetAtt": [ "WatcherAlarmDeleteFunction", "Arn" ] },
            "Id": "Replication-Watcher-Alarm-Delete"
          }
        ]
      }
    },
    "WatcherAlarmDeletePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Fn::GetAtt": [ "WatcherAlarmDeleteFunction", "Arn" ] },
        "Principal": "events.amazonaws.com",
        "SourceArn": { "Fn::GetAtt": [ "WatcherAlarmDeleteRule", "Arn" ] }
      }
    },
    "ReplicationApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": { "Ref": "ApiName" },
        "Description": "DynamoDB Replication Api"
      }
    },
    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": [
        "ApiReplicationsPostMethod", "ApiReplicationsIdentifierDeleteMethod", "ApiReplicationsGetMethod",
        "ApiPrefixesPostMethod", "ApiPrefixesIdentifierDeleteMethod", "ApiPrefixesGetMethod",
        "ApiMetricsNamespaceMetricIdentifierGetMethod"
      ],
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi"},
        "Description": "FLUFF",
        "StageName": "DEPLOY"
      }
    },
    "ApiStage": {
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "StageName": "PROD",
        "Description": "PROD",
        "RestApiId": { "Ref": "ReplicationApi" },
        "DeploymentId": { "Ref": "ApiDeployment" },
        "Variables": {
          "CONTROLLER_TABLE": { "Ref": "ControllerTableName" },
          "PREFIX_TABLE": { "Ref": "PrefixTableName" }
        }
      }
    },
    "ApiKey": {
      "Type": "AWS::ApiGateway::ApiKey",
      "DependsOn": [ "ApiDeployment", "ApiStage" ],
      "Properties": {
        "Name": "ReplicationConsoleApiKey",
        "Description": "fluff",
        "Enabled": true,
        "StageKeys": [
          {
            "RestApiId": { "Ref": "ReplicationApi" },
            "StageName": { "Ref": "ApiStage" }
          }
        ]
      }
    },
    "ApiReplicationsResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {"Ref": "ReplicationApi" },
        "ParentId": { "Fn::GetAtt": [ "ReplicationApi", "RootResourceId" ] },
        "PathPart": "replications"
      }
    },
    "ApiReplicationsIdentifierResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ParentId": { "Ref": "ApiReplicationsResource" },
        "PathPart": "{replication}"
      }
    },
    "ApiPrefixesResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ParentId": { "Fn::GetAtt": [ "ReplicationApi", "RootResourceId" ] },
        "PathPart": "prefixes"
      }
    },
    "ApiPrefixesIdentifierResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ParentId": { "Ref": "ApiPrefixesResource" },
        "PathPart": "{prefix}"
      }
    },
    "ApiMetricsResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ParentId": { "Fn::GetAtt": [ "ReplicationApi", "RootResourceId" ] },
        "PathPart": "metrics"
      }
    },
    "ApiMetricsNamespaceIdentifierResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ParentId": { "Ref": "ApiMetricsResource" },
        "PathPart": "{namespace}"
      }
    },
    "ApiMetricsNamespaceMetricIdentifierResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ParentId": { "Ref": "ApiMetricsNamespaceIdentifierResource" },
        "PathPart": "{metric}"
      }
    },
    "ApiReplicationsPostMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiReplicationsResource" },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "Uri": { "Fn::Join": [ "", [ "arn:aws:apigateway:", { "Ref": "AWS::Region" }, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": [ "ApiReplicationsPostFunction", "Arn" ] }, "/invocations"  ] ] },
          "IntegrationHttpMethod": "POST",
          "RequestTemplates": {
            "application/json": "{\n  \"table\": $input.json('$.key'),\n \"controller\": \"$util.escapeJavaScript($stageVariables.get('CONTROLLER_TABLE'))\"\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiReplicationsGetMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiReplicationsResource" },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "Uri": { "Fn::Join": [ "", [ "arn:aws:apigateway:", { "Ref": "AWS::Region" }, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": [ "ApiTableGetFunction", "Arn" ] }, "/invocations"  ] ] },
          "IntegrationHttpMethod": "POST",
          "RequestTemplates": {
            "application/json": "{\n  \"table\": \"$util.escapeJavaScript($stageVariables.get('CONTROLLER_TABLE'))\"\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiReplicationsCors": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiReplicationsResource" },
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{\n  \"statusCode\": 200\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,GET,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiReplicationsIdentifierDeleteMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiReplicationsIdentifierResource" },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "Uri": { "Fn::Join": [ "", [ "arn:aws:apigateway:", { "Ref": "AWS::Region" }, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": [ "ApiReplicationsDeleteFunction", "Arn" ] }, "/invocations"  ] ] },
          "IntegrationHttpMethod": "POST",
          "RequestTemplates": {
            "application/json": "{\n  \"table\": \"$input.params('replication')\",\n \"controller\": \"$util.escapeJavaScript($stageVariables.get('CONTROLLER_TABLE'))\"\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiReplicationsIdentifierCors": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiReplicationsIdentifierResource" },
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{\n  \"statusCode\": 200\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'DELETE,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiPrefixesPostMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiPrefixesResource" },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "Uri": { "Fn::Join": [ "", [ "arn:aws:apigateway:", { "Ref": "AWS::Region" }, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": [ "ApiPrefixesPostFunction", "Arn" ] }, "/invocations"  ] ] },
          "IntegrationHttpMethod": "POST",
          "RequestTemplates": {
            "application/json": "{\n  \"prefix\": $input.json('$.key'),\n \"prefixTable\": \"$util.escapeJavaScript($stageVariables.get('PREFIX_TABLE'))\"\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiPrefixesGetMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiPrefixesResource" },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "Integration": {
          "Type": "AWS",
          "Uri": { "Fn::Join": [ "", [ "arn:aws:apigateway:", { "Ref": "AWS::Region" }, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": [ "ApiTableGetFunction", "Arn" ] }, "/invocations"  ] ] },
          "IntegrationHttpMethod": "POST",
          "RequestTemplates": {
            "application/json": "{\n  \"table\": \"$util.escapeJavaScript($stageVariables.get('PREFIX_TABLE'))\"\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiPrefixesCors": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiPrefixesResource" },
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{\n  \"statusCode\": 200\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'POST,GET,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiPrefixesIdentifierDeleteMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiPrefixesIdentifierResource" },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "HttpMethod": "DELETE",
        "Integration": {
          "Type": "AWS",
          "Uri": { "Fn::Join": [ "", [ "arn:aws:apigateway:", { "Ref": "AWS::Region" }, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": [ "ApiPrefixesDeleteFunction", "Arn" ] }, "/invocations"  ] ] },
          "IntegrationHttpMethod": "POST",
          "RequestTemplates": {
            "application/json": "{\n  \"prefix\": \"$input.params('prefix')\",\n \"prefixTable\": \"$util.escapeJavaScript($stageVariables.get('PREFIX_TABLE'))\"\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiPrefixesIdentifierCors": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiPrefixesIdentifierResource" },
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{\n  \"statusCode\": 200\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'DELETE,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiMetricsNamespaceMetricIdentifierGetMethod": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiMetricsNamespaceMetricIdentifierResource" },
        "ApiKeyRequired": true,
        "AuthorizationType": "NONE",
        "HttpMethod": "GET",
        "RequestParameters": {
          "method.request.querystring.dimension": false,
          "method.request.querystring.count": true,
          "method.request.querystring.period": true,
          "method.request.querystring.unit": true,
          "method.request.querystring.statistic": true
        },
        "Integration": {
          "Type": "AWS",
          "Uri": { "Fn::Join": [ "", [ "arn:aws:apigateway:", { "Ref": "AWS::Region" }, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": [ "ApiMetricsGetFunction", "Arn" ] }, "/invocations"  ] ] },
          "IntegrationHttpMethod": "POST",
          "RequestParameters": {
            "integration.request.querystring.dimension": "method.request.querystring.dimension",
            "integration.request.querystring.count": "method.request.querystring.count",
            "integration.request.querystring.period": "method.request.querystring.period",
            "integration.request.querystring.unit": "method.request.querystring.unit",
            "integration.request.querystring.statistic": "method.request.querystring.statistic"
          },
          "RequestTemplates": {
            "application/json": { "Fn::Join": [ "\n", [
              "{",
              "    \"namespace\": \"$input.params('namespace')\",",
              "    \"metric\": \"$input.params('metric')\",",
              "    \"dimension\": \"$input.params('dimension')\",",
              "    \"count\": \"$input.params('count')\",",
              "    \"period\": \"$input.params('period')\",",
              "    \"unit\": \"$input.params('unit')\",",
              "    \"statistic\": \"$input.params('statistic')\"",
              "}"
            ]]}
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiMetricsNamespaceMetricIdentifierCors": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "RestApiId": { "Ref": "ReplicationApi" },
        "ResourceId": { "Ref": "ApiMetricsNamespaceMetricIdentifierResource" },
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{\n  \"statusCode\": 200\n}"
          },
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                "method.response.header.Access-Control-Allow-Methods": "'GET,OPTIONS'",
                "method.response.header.Access-Control-Allow-Origin": "'*'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseModels": {
              "application/json": "Empty"
            },
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true,
              "method.response.header.Access-Control-Allow-Origin": true
            }
          }
        ]
      }
    },
    "ApiTableGetRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/api/table/get/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiTableGetPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "ScanTables",
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Scan"
                  ],
                  "Resource": { "Fn::Join": [ ":", [ "arn", "aws", "dynamodb", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "table/*" ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "ApiTableGetFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-API-Table-Get",
        "Description": "Returns a list of all replications",
        "Role": { "Fn::GetAtt": [ "ApiTableGetRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/api/tables/get.min.js"
            }
          }
        }
      }
    },
    "ApiReplicationsGetPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "ApiTableGetFunction" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId"}, ":", { "Ref" : "ReplicationApi" }, "/*/GET/replications" ] ] }
      }
    },
    "ApiPrefixesGetPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "ApiTableGetFunction" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId"}, ":", { "Ref" : "ReplicationApi" }, "/*/GET/prefixes" ] ] }
      }
    },
    "ApiReplicationsPostRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/api/replications/post/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiReplicationsPostPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "CheckSource",
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable"
                  ],
                  "Resource": { "Fn::Join": [ ":", [ "arn", "aws", "dynamodb", { "Ref": "AWS::Region" }, { "Ref": "AWS::AccountId" }, "table/*" ] ] }
                },
                {
                  "Sid": "AddReplication",
                  "Action": [
                    "dynamodb:PutItem"
                  ],
                  "Effect": "Allow",
                  "Resource":  { "Fn::Join": [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "ControllerTableName" } ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "ApiReplicationsPostFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-API-Replications-Post",
        "Description": "Adds a replication to the controller table",
        "Role": { "Fn::GetAtt": [ "ApiReplicationsPostRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/api/tables/replications/post.min.js"
            }
          }
        }
      }
    },
    "ApiReplicationsPostPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "ApiReplicationsPostFunction" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId"}, ":", { "Ref" : "ReplicationApi" }, "/*/POST/replications" ] ] }
      }
    },
    "ApiReplicationsDeleteRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/api/replications/delete/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiReplicationsDeletePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "StopReplication",
                  "Action": [
                    "dynamodb:UpdateItem"
                  ],
                  "Effect": "Allow",
                  "Resource":  { "Fn::Join": [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "ControllerTableName" } ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "ApiReplicationsDeleteFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-API-Replications-Delete",
        "Description": "Removes an existing replication from the controller table",
        "Role": { "Fn::GetAtt": [ "ApiReplicationsDeleteRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/api/tables/replications/delete.min.js"
            }
          }
        }
      }
    },
    "ApiReplicationsDeletePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "ApiReplicationsDeleteFunction" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId"}, ":", { "Ref" : "ReplicationApi" }, "/*/DELETE/replications/{replication}" ] ] }
      }
    },
    "ApiPrefixesPostRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/api/prefixes/post/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiPrefixesPostPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "AddPrefix",
                  "Action": [
                    "dynamodb:PutItem"
                  ],
                  "Effect": "Allow",
                  "Resource":  { "Fn::Join": [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "PrefixTableName" } ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "ApiPrefixesPostFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-API-Prefixes-Post",
        "Description": "Add a new prefix to the prefix table",
        "Role": { "Fn::GetAtt": [ "ApiPrefixesPostRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/api/tables/prefixes/post.min.js"
            }
          }
        }
      }
    },
    "ApiPrefixesPostPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "ApiPrefixesPostFunction" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId"}, ":", { "Ref" : "ReplicationApi" }, "/*/POST/prefixes" ] ] }
      }
    },
    "ApiPrefixesDeleteRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/api/prefixes/delete/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiPrefixesDeletePolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "DeletePrefix",
                  "Action": [
                    "dynamodb:DeleteItem"
                  ],
                  "Effect": "Allow",
                  "Resource":  { "Fn::Join": [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "PrefixTableName" } ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "ApiPrefixesDeleteFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-API-Prefixes-Delete",
        "Description": "Remove an existing prefix from the prefix table",
        "Role": { "Fn::GetAtt": [ "ApiPrefixesDeleteRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/api/tables/prefixes/delete.min.js"
            }
          }
        }
      }
    },
    "ApiPrefixesDeletePermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "ApiPrefixesDeleteFunction" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId"}, ":", { "Ref" : "ReplicationApi" }, "/*/DELETE/prefixes/{prefix}" ] ] }
      }
    },
    "ApiPrefixesPostRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/api/prefixes/post/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiPrefixesPostPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "AddPrefix",
                  "Action": [
                    "dynamodb:PutItem"
                  ],
                  "Effect": "Allow",
                  "Resource":  { "Fn::Join": [ "", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":table/", { "Ref": "PrefixTableName" } ] ] }
                }
              ]
            }
          }
        ]
      }
    },
    "ApiPrefixesPostFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-API-Prefixes-Post",
        "Description": "Add a new prefix to the prefix table",
        "Role": { "Fn::GetAtt": [ "ApiPrefixesPostRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/api/tables/prefixes/post.min.js"
            }
          }
        }
      }
    },
    "ApiPrefixesPostPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "ApiPrefixesPostFunction" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId"}, ":", { "Ref" : "ReplicationApi" }, "/*/POST/prefixes" ] ] }
      }
    },
    "ApiMetricsGetRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/replication/api/metrics/get/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiMetricsGetPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Sid": "LambdaLogging",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Effect": "Allow",
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Sid": "GetMetricStatistics",
                  "Action": [
                    "cloudwatch:GetMetricStatistics"
                  ],
                  "Effect": "Allow",
                  "Resource":  "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ApiMetricsGetFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "FunctionName": "Replication-API-Metrics-Get",
        "Description": "Get CloudWatch metric statistics",
        "Role": { "Fn::GetAtt": [ "ApiMetricsGetRole", "Arn" ] },
        "Runtime": "nodejs8.10",
        "Handler": "index.handler",
        "MemorySize": 128,
        "Timeout": 300,
        "Code": {
          "ZipFile": {
            "Fn::Include": {
              "type": "literal",
              "location": "../lambda/api/metrics/get.min.js"
            }
          }
        }
      }
    },
    "ApiMetricsGetPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Ref": "ApiMetricsGetFunction" },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": { "Fn::Join": [ "", [ "arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId"}, ":", { "Ref" : "ReplicationApi" }, "/*/GET/metrics/{namespace}/{metric}" ] ] }
      }
    }
  },
  "Outputs": {
    "InvokeURL": {
      "Description": "Base URL for api",
      "Value": { "Fn::Join": [ "", [ "https://", { "Ref": "ReplicationApi" }, ".execute-api.", { "Ref": "AWS::Region" }, ".amazonaws.com/", { "Ref": "ApiStage" } ] ] }
    },
    "ApiKey": {
      "Description": "API Key for the web console",
      "Value": { "Ref": "ApiKey" }
    }
  }
}
